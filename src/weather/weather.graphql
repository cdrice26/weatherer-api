scalar Date

# Input type for the weather data request
input WeatherDataInput {
  location: String!
  startYear: Int!
  endYear: Int!
  averageYears: Int!
  regressionDegree: Int!
  metrics: [WeatherMetric!]! # Specify which metrics to analyze
}

# Enum to represent different types of metrics
enum WeatherMetric {
  AVERAGE_TEMPERATURE
  AVERAGE_APPARENT_TEMPERATURE
  PRECIPITATION
  SNOWFALL
  MAX_WIND_SPEED
}

# Historical data entry for a specific year and metric
type HistoricalMetricData {
  metric: WeatherMetric!
  date: Date!
  value: Float
}

# Generic regression result for a metric
type MetricRegression {
  metric: WeatherMetric!
  results: RegressionResults!
}

type RegressionResults {
  coefficients: [Float!]!
  rSquared: Float!
  testResults: FTestResults!
}

type FTestResults {
  fStatistic: Float!
  pValue: Float!
  significant: Boolean!
}

# Main result type
type WeatherAnalysis {
  historicalData: [HistoricalMetricData!]!
  regression: [MetricRegression!]!
  locationName: String
}

type Query {
  weatherAnalysis(input: WeatherDataInput): WeatherAnalysis
}
